{
//////////////////////////////////////////0 Encabezado
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "Wordpress-Template",
    "annotations": {
      "openshift.io/display-name": "Wordpress con mysql",
      "description": "Creamos la imagen mysql y de wordpress a partir de software collection. Después desplegamos.",
      "tags": "wordpress",
      "iconClass": "icon-wordpress"
    }
  },
//////////////////////////////////////////1 Parámetros
  "parameters": [
    {
      "name": "PROJECT_NAME",
      "description": "The name of the WordPress instance.",
      "value": "image-wp"
    },
    {
      "name": "WP_APPLICATION_NAME",
      "description": "The name of the WordPress instance.",
      "value": "wordpress",
      "required": true
    },
    {
      "name": "MYSQL_APPLICATION_NAME",
      "description": "The name of the mysql instance.",
      "value": "mysql80",
      "required": true
    },
    {
      "name": "SOURCE_REPOSITORY_MYSQL_URL",
      "description": "The URL of the quickstart Git repository.",
      "value": "https://github.com/samyunodos/mysql-container-1",
      "required": true
    },
    {
      "name": "SOURCE_REPOSITORY_MYSQL_TAG",
      "description": "The tagged version of the source repository to use.",
      "value": "mysql80",
      "required": true
    },
    { "name": "DOCKER_REGISTER",
      "description": "The password for the database user.",
      "value": "docker-registry.default.svc:5000"
    },
    //#### Todas las variables que empiezan por DB se introducencen desde el contenedor wordpress asi como las que aún no homos usado DB_HOST y DB_TABLE_PREFIX.
    {
      "name": "DB_NAME",
      "description": "Nombre de la base de datos (MYSQL_DATABASE).",
      "value": "mydatabase"
    },
    {
      "name": "DB_USER",
      "description": "Usuario de la base de datos (MYSQL_USER).",
      "value": "userdb"
    },
    {
       "name": "DB_PASSWORD",
      "description": "La contraseña del usuario para la base de datos (MYSQL_PASSWORD). Posteriormente la introudciremos como un secreto de kubernetes.",
      "value": "passuserdb"
    },
    
    {
      "name": "DB_ROOT_PASSWORD",
      "description": "El password del root de msql (MYSQL_ROOT_PASSWORD).  Posteriormente la introudciremos como un secreto de kubernetes.",
      "from": "[a-zA-Z0-9]{12}",
      "value": "passroot"
    },
  ],
//////////////////////////////////////////2 Objetos
  "objects": [
    //======== 20 Creación de la imagen mysql
//-------200 Secreto WebHook para samyunodos/mysql-container.git/#mysql80
    {
      "apiVersion": "v1",
      "kind": "Secret",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-s2i",
        "anotations": {
          "description": "Web Hook Secret Key."
        },
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        }
      },
      "type": "Opaque",
      "data": {
        "WebHookSecretKey": "dGVzdA=="
      }
    },
//-------201 Image stream mysql80-s2i
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-s2i",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        }
      }
    },
//-------202 Buildconfig mysql80-s2i
    {
      "kind": "BuildConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-s2i",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        }
      },
      "spec": {
        "failedBuildsHistoryLimit": 5,
        "nodeSelector": null,
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${MYSQL_APPLICATION_NAME}-s2i:latest"
          }
        },
        "postCommit": {
        },
        "resources": {
        },
        "triggers": [
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange"
          },
          {
            "type": "GitHub",
            "github": {
              "secretReference": {
                "name": "${MYSQL_APPLICATION_NAME}-s2i"
              }
            }
          }
        ],
        "source": {
          "type": "Git",
          "git": {
            "uri": "${SOURCE_REPOSITORY_MYSQL_URL}",
            "ref": "${SOURCE_REPOSITORY_MYSQL_TAG}"
          }
        },
        "strategy": {
          "type": "Docker",
          "dockerStrategy": {
            "dockerfilePath": "8.0/Dockerfile",
            "forcePull": true,
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/s2i-core-centos7:latest"
            }
          }
        }
      }
    },
    //#### Para crearla  oc process -f build/00_wp_deploy.json | oc apply -l build=mysql80-s2i -f -
    //#### Final mysql80-s2i, comprobamos con:
    //#### oc new-app mysql80-s2i:latest~https://github.com/samyunodos/mysql-container-1.git/#mysql80 --context-dir=test/test-app/mysql-cfg  --name prueba --strategy source --labe deploy=mysql80-s2i. De todas formas es mucho más sencillo crearla con buildconfig  para testearla

//-------203 Creación de imagen de testeo y despliegue
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-test",
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-test"
        }
      }
    },
    {
      "apiVersion": "build.openshift.io/v1",
      "kind": "BuildConfig",
      "metadata": {
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-test"
        },
        "name": "${MYSQL_APPLICATION_NAME}-test",
        "namespace": "${PROJECT_NAME}"
      },
      "spec": {
        "failedBuildsHistoryLimit": 5,
        "nodeSelector": null,
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${MYSQL_APPLICATION_NAME}-test:latest"
          }
        },
        "postCommit": {
        },
        "resources": {
        },
        "runPolicy": "Serial",
        "source": {
          "contextDir": "test/test-app/mysql-cfg",
          "git": {
            "ref": "mysql80",
            "uri": "https://github.com/samyunodos/mysql-container-1.git"
          },
          "type": "Git"
        },
        "type": "Source",
        "strategy": {
          "sourceStrategy": {
            "from": {
              "kind": "ImageStreamTag",
              "namespace": "${PROJECT_NAME}",
              "name": "${MYSQL_APPLICATION_NAME}-s2i:latest"
            },
            // "env": [
            //   {
            //     "name": "DB_USER",
            //     "value": "${MYSQL_USER}"
            //   },
            //   {
            //     "name": "DB_PASSWORD",
            //     "value": "${MYSQL_PASSWORD}"
            //   },
            //   {
            //     "name": "DB_NAME",
            //     "value": "${MYSQL_DATABASE}"
            //   },
            //   {
            //     "name": "DB_HOST",
            //     "value": "${MYSQL_APPLICATION_NAME}"
            //   },
            //   {
            //     "name": "DB_PORT",
            //     "value": "${MYSQL_PORT_NAME}"
            //   }
            // ]
          }
        },
        "triggers": [
          {
            // "github": {
            //   "secret": "xdlwMqxFiVkfR9fBiIaV",
            //   "secretReference": {
            //     "name": "secret-php72-fpm-img"
            //   }
            // },
            // "type": "GitHub"
          },
          {
            "generic": {
              "secret": "F-ilfroO9PAhjTRSWX67"
            },
            "type": "Generic"
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange"
          }
        ]
      }
    },
    {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-test",
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-test"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "8080-tcp",
            "protocol": "TCP",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "app": "${MYSQL_APPLICATION_NAME}-test",
          "build": "${MYSQL_APPLICATION_NAME}-test"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-test",
        "labels": {
           "app": "${MYSQL_APPLICATION_NAME}-test",
           "build": "${MYSQL_APPLICATION_NAME}-test"
        }
      },
      "spec": {
        "strategy": {
          // "type": "Rolling"
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${MYSQL_APPLICATION_NAME}-test",
          "deploymentconfig": "${MYSQL_APPLICATION_NAME}-test"
        },
        "template": {
          "metadata": {
            "labels": {
              "app":  "${MYSQL_APPLICATION_NAME}-test",
              "deploymentconfig":  "${MYSQL_APPLICATION_NAME}-test",
            }
          },
          "spec": {
            "containers": [
              {
                "name": "mysql80",
                "image": "${DOCKER_REGISTER}/${PROJECT_NAME}/${MYSQL_APPLICATION_NAME}-test:latest",
                 "args": [
                  "run-mysqld"
                ],
                "ports": [
                  {
                    "containerPort": 3306,
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "512Mi"
                  }
                },
                "env": [
                  {
                    "name": "MYSQL_DATABASE",
                    "value": "${DB_NAME}"
                  },
                  {
                    "name": "MYSQL_USER",
                    "value": "${DB_USER}"
                  },
                  {
                    "name": "MYSQL_PASSWORD",
                    "value": "${DB_PASSWORD}"
                  },
           
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "${DB_ROOT_PASSWORD}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    //#### Para crearla  oc process -f build/00_wp_deploy.json | oc apply -l build=mysql80-test -f -
    // Necesitamos especifigar las siguientes environment variables:
    //   MYSQL_USER (regex: '^[a-zA-Z0-9_]+$')
    //   MYSQL_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$') (lo pondremos como secreto)
    //   MYSQL_DATABASE (regex: '^[a-zA-Z0-9_]+$')
    // Esta no es necesaria pero si que la iniciaremos.
    //   MYSQL_ROOT_PASSWORD (regex: '^[a-zA-Z0-9_~!@#$%^&*()-=<>,.?;:|]+$') (lo pondremos como secreto)
    // Estas son opcionales:
    //   MYSQL_LOWER_CASE_TABLE_NAMES (default: 0)
    //   MYSQL_LOG_QUERIES_ENABLED (default: 0)
    //   MYSQL_MAX_CONNECTIONS (default: 151)
    //   MYSQL_FT_MIN_WORD_LEN (default: 4)
    //   MYSQL_FT_MAX_WORD_LEN (default: 20)
    //   MYSQL_AIO (default: 1)
    //   MYSQL_KEY_BUFFER_SIZE (default: 32M or 10% of available memory)
    //   MYSQL_MAX_ALLOWED_PACKET (default: 200M)
    //   MYSQL_TABLE_OPEN_CACHE (default: 400)
    //   MYSQL_SORT_BUFFER_SIZE (default: 256K)
    //   MYSQL_READ_BUFFER_SIZE (default: 8M or 5% of available memory)
    //   MYSQL_INNODB_BUFFER_POOL_SIZE (default: 32M or 50% of available memory)
    //   MYSQL_INNODB_LOG_FILE_SIZE (default: 8M or 15% of available memory)
    //   MYSQL_INNODB_LOG_BUFFER_SIZE (default: 8M or 15% of available memory)
    //   Ahora nos faltaría testear dicho despliegue. Para ello vamos a utilizar la dduportal/bats que emplea bats. Necesitaremos previamente agregar el escript que nos interesa en el directorio /tests, que es WORKDIR. Primero creamos un script run.sh el cual mediante bats nos checkea si ls base de datos mysql es accessible. Este script lo creamos en un configmap y luego lo cargamos.
    {
      "kind": "ConfigMap",
      "metadata": {

        "name": "${MYSQL_APPLICATION_NAME}-tester",
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}-test",
          "build": "${MYSQL_APPLICATION_NAME}-test",
          "deploy": "${MYSQL_APPLICATION_NAME}-tester"
        }
      },
      // "data": {
      //   "run.sh": "@test \"Testing MariaDB is accessible\" { \nmysql -h mysql80-test -uroot -p$DB_ROOT_PASSWORD -e 'show databases;' \n}"
      // },
      "data": {
        "run.sh": ""
      },
       "apiVersion": "v1"

    },
    //A continuación desplegamos el test
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-testeador",
        "labels": {
          "app": "${MYSQL_APPLICATION_NAME}-test",
          "build": "${MYSQL_APPLICATION_NAME}-test",
          "deploy": "${MYSQL_APPLICATION_NAME}-tester"
        }
      },
      "spec": {
        "strategy": {
          "type": "Rolling"
          // "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${MYSQL_APPLICATION_NAME}-tester",
          "deploymentconfig": "${MYSQL_APPLICATION_NAME}-tester"
        },
        "template": {
          "metadata": {
            "labels": {
              "app": "${MYSQL_APPLICATION_NAME}-tester",
              "deploymentconfig":  "${MYSQL_APPLICATION_NAME}-tester",
            }
          },
          "spec": {
            "containers": [
              {
                "name": "dduportal-bats",
                "image": "dduportal/bats:0.4.0",
                "command": [ "bash", "-c", "set- ex", "cp -R /usr/local/libexec/ /tools/bats/"
                ],
                // "args": [
                //   "run.sh"
                // ]
                "resources": {
                  "limits": {
                    "memory": "512Mi"
                  }
                },
                // "livenessProbe": {
                //   "exec":{
                //     "command": ["sh", "-c", "exec mysqladmin status -uroot -p$DB_ROOT_PASSWORD"]
                //   },
                //   "initialDelaySeconds": 30,
                //   "periodSeconds": 10,
                //   "timeoutSeconds": 1,
                //   "successThreshold": 1,
                //   "failureThreshold": 3
                // },
                // "startupProbe": {
                //   "exec": {
                //     "command": [ "sh", "-c", "exec mysqladmin status -uroot -p$DB_ROOT_PASSWORD" ]
                //   },
                //   "successThreshold": 1,
                //   "failureThreshold": 12, 
                //   "periodSeconds": 10
                // },
                "readinessProbe": {
                  "exec":{
                    "command": [ "sh", "-c", "exec mysqladmin status --host=$(hostname) --user=root --password=$DB_ROOT_PASSWORD" ]
                  },
                  "initialDelaySeconds": 300,
                  "periodSeconds": 10,
                  "failureThreshold": 3
                },
                "volumeMounts": [
                  {
                    "mountPath": "/tests",
                    "name": "tests"
                  }
                ]
              }
            ],
            "volumes": [
              {
                "name": "tests",
                "configMap": {
                  "name": "${MYSQL_APPLICATION_NAME}-tester"
                }
              }
            ] 
          }
        }
      }
    },
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-img",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        }
      }
    },
    {
      "apiVersion": "build.openshift.io/v1",
      "kind": "BuildConfig",
      "metadata": {
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        },
        "name": "${MYSQL_APPLICATION_NAME}-img",
        "namespace": "${PROJECT_NAME}"
      },
      "spec": {
        "failedBuildsHistoryLimit": 5,
        "nodeSelector": null,
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${MYSQL_APPLICATION_NAME}-img:latest"
          }
        },
        "postCommit": {
        },
        "resources": {
        },
        "runPolicy": "Serial",
        "source": {
          "contextDir": "test/test-app/mysql-cfg",
          "git": {
            "ref": "mysql80",
            "uri": "https://github.com/samyunodos/mysql-container-1.git"
          },
          "type": "Git"
        },
        "type": "Source",
        "strategy": {
          "sourceStrategy": {
            "from": {
              "kind": "ImageStreamTag",
              "namespace": "${PROJECT_NAME}",
              "name": "${MYSQL_APPLICATION_NAME}-s2i:latest"
            },
            // "env": [
            //   {
            //     "name": "DB_USER",
            //     "value": "${MYSQL_USER}"
            //   },
            //   {
            //     "name": "DB_PASSWORD",
            //     "value": "${MYSQL_PASSWORD}"
            //   },
            //   {
            //     "name": "DB_NAME",
            //     "value": "${MYSQL_DATABASE}"
            //   },
            //   {
            //     "name": "DB_HOST",
            //     "value": "${MYSQL_APPLICATION_NAME}"
            //   },
            //   {
            //     "name": "DB_PORT",
            //     "value": "${MYSQL_PORT_NAME}"
            //   }
            // ]
          }
        },
        "triggers": [
          {
            // "github": {
            //   "secret": "xdlwMqxFiVkfR9fBiIaV",
            //   "secretReference": {
            //     "name": "secret-php72-fpm-img"
            //   }
            // },
            // "type": "GitHub"
          },
          {
            "generic": {
              "secret": "F-ilfroO9PAhjTRSWX67"
            },
            "type": "Generic"
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange"
          }
        ]
      }
    },
     {
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "8080-tcp",
            "protocol": "TCP",
            "port": 8080,
            "targetPort": 8080
          }
        ],
        "selector": {
          "app": "${MYSQL_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}",
          "deploy": "${MYSQL_APPLICATION_NAME}-deploy"
        }
      }
    },
    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${MYSQL_APPLICATION_NAME}-img",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${MYSQL_APPLICATION_NAME}",
          // "build": "${MYSQL_APPLICATION_NAME}-s2i",
          "deploy": "${MYSQL_APPLICATION_NAME}-deploy"
        }
      },
      "spec": {
        "strategy": {
          // "type": "Rolling"
          "type": "Recreate"
        },
        "triggers": [
          {
            "type": "ConfigChange"
          }
        ],
        "replicas": 1,
        "selector": {
          "app": "${MYSQL_APPLICATION_NAME}-dply",
          "deploymentconfig": "${MYSQL_APPLICATION_NAME}-dply"
        },
        "template": {
          "metadata": {
            "labels": {
              "app":  "${MYSQL_APPLICATION_NAME}-dply",
              "deploymentconfig":  "${MYSQL_APPLICATION_NAME}-dply",
            }
          },
          "spec": {
            "containers": [
              {
                "name": "mysql80",
                "image": "${DOCKER_REGISTER}/${PROJECT_NAME}/${MYSQL_APPLICATION_NAME}-img:latest",
                 "args": [
                  "run-mysqld"
                ],
                "ports": [
                  {
                    "containerPort": 3306,
                    "protocol": "TCP"
                  }
                ],
                "resources": {
                  "limits": {
                    "memory": "512Mi"
                  }
                },
                  "livenessProbe": {
                    "exec":{
                       "command": [ "/usr/bin/sh", "-i", "-c","MYSQL_PWD=\"$MYSQL_ROOT_PASSWORD\" mysqladmin status --user=root --host=$(hostname)" ]
                    
                  },
                  "initialDelaySeconds": 20,
                  "periodSeconds": 20,
                  "failureThreshold": 30
                },
                "startupProbe": {
                  "exec": {
                     "command": [ "/usr/bin/sh", "-i", "-c","MYSQL_PWD=\"$MYSQL_ROOT_PASSWORD\" mysqladmin status --user=root --host=$(hostname)" ]
                  },
                  "successThreshold": 1,
                  "failureThreshold": 30, 
                  "periodSeconds": 10
                },
                "readinessProbe": {
                  "exec":{
                    // "command": [ "mysqladmin status --user=root --host=$(hostname) --password=$MYSQL_ROOT_PASSWORD" ]
                   "command": [ "/usr/bin/sh", "-i", "-c","MYSQL_PWD=\"$MYSQL_ROOT_PASSWORD\" mysqladmin status --user=root --host=$(hostname)" ]
                  },
                  "initialDelaySeconds": 20,
                  "periodSeconds": 10,
                  "failureThreshold": 1
                },
                "env": [
                  {
                    "name": "MYSQL_DATABASE",
                    "value": "${DB_NAME}"
                  },
                  {
                    "name": "MYSQL_USER",
                    "value": "${DB_USER}"
                  },
                  {
                    "name": "MYSQL_PASSWORD",
                    "value": "${DB_PASSWORD}"
                  },
           
                  {
                    "name": "MYSQL_ROOT_PASSWORD",
                    "value": "${DB_ROOT_PASSWORD}"
                  }
                ]
              }
            ]
          }
        }
      }
    },
    // Hasta aquí tenemos la base de datos con los Probe funcionando, sin persistencia.
    // Ahora vamos a implementar el contenedor wordpress. Este puede ser standalone (que no necesita nada, es decir, que sería una instalación nueva ) o repository ( que ya tiene wp-content, wp-config.php y .htaccess si acaso ). La estrategia es mediante s2i  realizar un compilación progresiva. Para ello partimos de s2i-php-container para realizar un builder que puede funcionar como imagen stream ( de forma standalone ) o bien como un builder para progresivamente incorporar source ( como repository). Hacer notar que hacemos las transformaciones en s2i-php-container para que funcione con fpm ( php fast ) y a su vez generamos otro build.
    // Creamos la builder desde el repositorio llamado php-fpm-s2i
    {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata": {
        "name": "${WP_APPLICATION_NAME}-s2i",
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${WP_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i",
          "build1": "${WP_APPLICATION_NAME}-s2i"
        }
      }
    },
    {
      "apiVersion": "build.openshift.io/v1",
      "kind": "BuildConfig",
      "metadata": {
        "labels": {
          "project": "${PROJECT_NAME}",
          "app": "${WP_APPLICATION_NAME}",
          "build": "${MYSQL_APPLICATION_NAME}-s2i",
          "build1": "${WP_APPLICATION_NAME}-s2i"
        },
        "name":  "${WP_APPLICATION_NAME}-s2i",
        "namespace": "${PROJECT_NAME}"
      },
      "spec": {
        "failedBuildsHistoryLimit": 5,
        "nodeSelector": null,
        "output": {
          "to": {
            "kind": "ImageStreamTag",
            "name": "${WP_APPLICATION_NAME}-s2i:latest"
          }
        },
        "postCommit": {
        },
        "resources": {
        },
        "runPolicy": "Serial",
        "source": {
          "contextDir": "7.2",
          "git": {
            "ref": "wp",
            "uri": "https://github.com/samyunodos/s2i-php-container.git"
          },
          "type": "Git"
        },
        "strategy": {
          "dockerStrategy": {
            "forcePull": true,
            // "dockerfilePath": "7.2/Dockerfile",
            "from": {
              "kind": "DockerImage",
              "name": "docker.io/centos/s2i-base-centos7:latest"
            }
          },
          "type": "Docker"
        },
        "triggers": [
          {
            "github": {
              "secret": "xdlwMqxFiVkfR9fBiIaV",
              "secretReference": {
                "name": "secret-php72-fpm-s2i"
              }
            },
            "type": "GitHub"
          },
          {
            "generic": {
              "secret": "F-ilfroO9PAhjTRSWX67"
            },
            "type": "Generic"
          },
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange"
          }
        ]
      }
    }
    // Para commprobar la imagen wordpress-s2i:
    // $ oc new-app php-fpm-s2i:latest~https://github.com/samyunodos/s2i-php-container.git/#wp --context-dir=test/test-app  --name prueba --strategy source -l deploy=wordpress-s2i
    // Para borrar:
    // $ oc delete all  -l deploy=wordpress-s2i
    // Con directorio contexto: 
    // oc new-app php-fpm-s2i:latest~https://github.com/samyunodos/s2i-php-container.git/#wp --context-dir=contexto  --name prueba --strategy source -l deploy=wordpress-s2i

// {
//       "kind": "ImageStream",
//       "apiVersion": "v1",
//       "metadata": {
//         "name": "${WP_APPLICATION_NAME}-s2i",
//         "labels": {
//           "project": "${PROJECT_NAME}",
//           "app": "${WP_APPLICATION_NAME}",
//           "build": "${MYSQL_APPLICATION_NAME}-s2i",
//           "build1": "${WP_APPLICATION_NAME}-s2i"
//         }
//       }
//     },
//  {
//       "apiVersion": "build.openshift.io/v1",
//       "kind": "BuildConfig",
//       "metadata": {
//         "labels": {
//           "project": "${PROJECT_NAME}",
//           "app": "${WP_APPLICATION_NAME}",
//           "build": "${MYSQL_APPLICATION_NAME}-s2i",
//           "build1": "${WP_APPLICATION_NAME}-s2i"
         
//         },
//         "name": "${WP_APPLICATION_NAME}-s2i",
//         "namespace": "${PROJECT_NAME}"
//       },
//       "spec": {
//         "failedBuildsHistoryLimit": 5,
//         "nodeSelector": null,
//         "output": {
//           "to": {
//             "kind": "ImageStreamTag",
//             "name": "${WP_APPLICATION_NAME}-s2i:latest"
//           }
//         },
//         "postCommit": {
//         },
//         "resources": {
//         },
//         "runPolicy": "Serial",
//         "source": {
//           "contextDir": "contexto",
//           "git": {
//             "ref": "wp",
//             "uri": "https://github.com/samyunodos/s2i-php-container.git"
//           },
//           "type": "Git"
//         },
//         "type": "Source",
//         "strategy": {
//           "sourceStrategy": {
//             "from": {
//               "kind": "ImageStreamTag",
//               "namespace": "${PROJECT_NAME}",
//               "name": "${WP_APPLICATION_NAME}-s2i:latest"
//             },
//             // "env": [
//             //   {
//             //     "name": "DB_USER",
//             //     "value": "${MYSQL_USER}"
//             //   },
//             //   {
//             //     "name": "DB_PASSWORD",
//             //     "value": "${MYSQL_PASSWORD}"
//             //   },
//             //   {
//             //     "name": "DB_NAME",
//             //     "value": "${MYSQL_DATABASE}"
//             //   },
//             //   {
//             //     "name": "DB_HOST",
//             //     "value": "${MYSQL_APPLICATION_NAME}"
//             //   },
//             //   {
//             //     "name": "DB_PORT",
//             //     "value": "${MYSQL_PORT_NAME}"
//             //   }
//             // ]
//           }
//         },
//         "triggers": [
//           {
//             // "github": {
//             //   "secret": "xdlwMqxFiVkfR9fBiIaV",
//             //   "secretReference": {
//             //     "name": "secret-php72-fpm-img"
//             //   }
//             // },
//             // "type": "GitHub"
//           },
//           {
//             "generic": {
//               "secret": "F-ilfroO9PAhjTRSWX67"
//             },
//             "type": "Generic"
//           },
//           {
//             "type": "ConfigChange"
//            },
//           {
//             "type": "ImageChange"
//           }
//         ]
//       }
//     }
  ]
}
