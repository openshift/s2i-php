.TH PHP 7.1 Docker image
.PP
This container image includes PHP 7.1 as a S2I
\[la]https://github.com/openshift/source-to-image\[ra] base image for your PHP 7.1 applications.
Users can choose between RHEL and CentOS based builder images.
The RHEL image is available in the Red Hat Container Catalog
\[la]https://access.redhat.com/containers/#/registry.access.redhat.com/rhscl/php-71-rhel7\[ra]
as registry.access.redhat.com/rhscl/php\-71\-rhel7.
The CentOS image is then available on Docker Hub
\[la]https://hub.docker.com/r/centos/php-71-centos7/\[ra]
as centos/php\-71\-centos7.
The resulting image can be run using Docker
\[la]http://docker.io\[ra]\&.

.SH Description
.PP
PHP 7.1 available as docker container is a base platform for
building and running various PHP 7.1 applications and frameworks.
PHP is an HTML\-embedded scripting language. PHP attempts to make it easy for developers
to write dynamically generated web pages. PHP also offers built\-in database integration
for several commercial and non\-commercial database management systems, so writing
a database\-enabled webpage with PHP is fairly simple. The most common use of PHP coding
is probably as a replacement for CGI scripts.

.SH Usage
.PP
To build a simple php\-test\-app
\[la]https://github.com/sclorg/s2i-php-container/tree/master/7.1/test/test-app\[ra] application
using standalone S2I
\[la]https://github.com/openshift/source-to-image\[ra] and then run the
resulting image with Docker
\[la]http://docker.io\[ra] execute:

.RS
.IP \(bu 2

.PP
\fBFor RHEL based image\fP
.PP
.RS

.nf
$ s2i build https://github.com/sclorg/s2i\-php\-container.git \-\-context\-dir=7.1/test/test\-app rhscl/php\-71\-rhel7 php\-test\-app
$ docker run \-p 8080:8080 php\-test\-app

.fi
.RE
.IP \(bu 2

.PP
\fBFor CentOS based image\fP
.PP
.RS

.nf
$ s2i build https://github.com/sclorg/s2i\-php\-container.git \-\-context\-dir=7.1/test/test\-app centos/php\-71\-centos7 php\-test\-app
$ docker run \-p 8080:8080 php\-test\-app

.fi
.RE

.RE

.PP
\fBAccessing the application:\fP

.PP
.RS

.nf
$ curl 127.0.0.1:8080

.fi
.RE

.SH Environment variables
.PP
To set these environment variables, you can place them as a key value pair into a \fB\fC\&.sti/environment\fR
file inside your source code repository.

.PP
The following environment variables set their equivalent property value in the php.ini file:
* \fBERROR\_REPORTING\fP
  * Informs PHP of which errors, warnings and notices you would like it to take action for
  * Default: E\_ALL \& \~E\_NOTICE
* \fBDISPLAY\_ERRORS\fP
  * Controls whether or not and where PHP will output errors, notices and warnings
  * Default: ON
* \fBDISPLAY\_STARTUP\_ERRORS\fP
  * Cause display errors which occur during PHP's startup sequence to be handled separately from display errors
  * Default: OFF
* \fBTRACK\_ERRORS\fP
  * Store the last error/warning message in $php\_errormsg (boolean)
  * Default: OFF
* \fBHTML\_ERRORS\fP
  * Link errors to documentation related to the error
  * Default: ON
* \fBINCLUDE\_PATH\fP
  * Path for PHP source files
  * Default: .:/opt/app\-root/src:/opt/rh/rh\-php71/root/usr/share/pear
* \fBSESSION\_PATH\fP
  * Location for session data files
  * Default: /tmp/sessions
* \fBSHORT\_OPEN\_TAG\fP
  * Determines whether or not PHP will recognize code between <? and ?> tags
  * Default: OFF
* \fBDOCUMENTROOT\fP
  * Path that defines the DocumentRoot for your application (ie. /public)
  * Default: /

.PP
The following environment variables set their equivalent property value in the opcache.ini file:
* \fBOPCACHE\_MEMORY\_CONSUMPTION\fP
  * The OPcache shared memory storage size in megabytes
  * Default: 128
* \fBOPCACHE\_REVALIDATE\_FREQ\fP
  * How often to check script timestamps for updates, in seconds. 0 will result in OPcache checking for updates on every request.
  * Default: 2

.PP
You can also override the entire directory used to load the PHP configuration by setting:
* \fBPHPRC\fP
  * Sets the path to the php.ini file
* \fBPHP\_INI\_SCAN\_DIR\fP
  * Path to scan for additional ini configuration files

.PP
You can use a custom composer repository mirror URL to download packages instead of the default 'packagist.org':

.PP
.RS

.nf
* **COMPOSER\_MIRROR**
  * Adds a custom composer repository mirror URL to composer configuration. Note: This only affects packages listed in composer.json.
* **COMPOSER\_INSTALLER**
  * Overrides the default URL for downloading Composer of https://getcomposer.org/installer. Useful in disconnected environments.

.fi
.RE

.SH Source repository layout
.PP
You do not need to change anything in your existing PHP project's repository.
However, if these files exist they will affect the behavior of the build process:

.RS
.IP \(bu 2
\fBcomposer.json\fP

.RE

.PP
List of dependencies to be installed with \fB\fCcomposer\fR\&. The format is documented
  here
\[la]https://getcomposer.org/doc/04-schema.md\[ra]\&.

.SH Hot deploy
.PP
In order to immediately pick up changes made in your application source code, you need to run your built image with the \fB\fCOPCACHE\_REVALIDATE\_FREQ=0\fR environment variable passed to the Docker
\[la]http://docker.io\[ra] \fB\fC\-e\fR run flag:

.PP
.RS

.nf
$ docker run \-e OPCACHE\_REVALIDATE\_FREQ=0 \-p 8080:8080 php\-app

.fi
.RE

.PP
To change your source code in running container, use Docker's exec
\[la]http://docker.io\[ra] command:

.PP
.RS

.nf
docker exec \-it <CONTAINER\_ID> /bin/bash

.fi
.RE

.PP
After you Docker exec
\[la]http://docker.io\[ra] into the running container, your current directory is set
to \fB\fC/opt/app\-root/src\fR, where the source code is located.

.SH See also
.PP
Dockerfile and other sources are available on 
\[la]https://github.com/sclorg/s2i-php-container\[ra]\&.
In that repository you also can find another versions of PHP environment Dockerfiles.
Dockerfile for CentOS is called Dockerfile, Dockerfile for RHEL is called Dockerfile.rhel7.

.SH Security Implications
.PP
\-p 8080:8080

.PP
.RS

.nf
 Opens  container  port  8080  and  maps it to the same port on the Host.

.fi
.RE
